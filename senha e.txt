
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package javaapplication3;

import java.security.SecureRandom;

public class JavaApplication3 {

   // Conjunto de caracteres permitidos no token
    private static final String CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:,.<>?/~";

    // Método para gerar um token seguro
    public static String generateSecureToken(int length) {
        SecureRandom secureRandom = new SecureRandom(); // Usando SecureRandom para gerar números aleatórios
        
        StringBuilder token = new StringBuilder(length); // StringBuilder para construir o token
        
        // Gerando o token com caracteres aleatórios
        for (int i = 0; i < length; i++) {
            int randomIndex = secureRandom.nextInt(CHARACTERS.length()); // Escolher um índice aleatório
            token.append(CHARACTERS.charAt(randomIndex)); // Adicionar o caractere no token
        }
        
        return token.toString(); // Retorna o token gerado
    }
    
    
    public static boolean isPasswordSecure(String password) {
        if (password == null || password.length() < 8) return false;

        boolean hasUpper = false;
        boolean hasLower = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;

        String specialChars = "!@#$%^&*()-_=+[]{}|;:'\",.<>?/`~";

        for (char ch : password.toCharArray()) {
            if (Character.isUpperCase(ch)) {
                hasUpper = true;
            } else if (Character.isLowerCase(ch)) {
                hasLower = true;
            } else if (Character.isDigit(ch)) {
                hasDigit = true;
            } else if (specialChars.indexOf(ch) >= 0) {
                hasSpecial = true;
            }
        }

        return hasUpper && hasLower && hasDigit && hasSpecial;
    }

    


    public static void main(String[] args) {
        // Gerar um token de 32 caracteres (incluindo letras, números e caracteres especiais)
        String token = generateSecureToken(15);
        String senha = generateSecureToken(10);
        
        System.out.println("Senha gerada: " + token);
        System.out.println(isPasswordSecure(token));
                System.out.println();
                System.out.println("Token gerado: " + senha);
                System.out.println(isPasswordSecure(senha));

    }
}
